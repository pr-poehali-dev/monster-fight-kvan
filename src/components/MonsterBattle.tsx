
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import Icon from "@/components/ui/icon";

interface ClanStats {
  name: string;
  strength: number;
  defense: number;
  health: number;
  description: string;
  leaderRace: string;
}

interface Monster {
  name: string;
  type: string;
  strength: number;
  defense: number;
  health: number;
  maxHealth: number;
  image: string;
}

interface MonsterBattleProps {
  clan: ClanStats;
  abilities: string[];
}

const MonsterBattle = ({ clan, abilities }: MonsterBattleProps) => {
  const [battleLog, setBattleLog] = useState<string[]>([]);
  const [currentMonster, setCurrentMonster] = useState<Monster>({
    name: "–ì–æ–±–ª–∏–Ω-—Ä–∞–∑–≤–µ–¥—á–∏–∫",
    type: "–≥—É–º–∞–Ω–æ–∏–¥",
    strength: 40,
    defense: 20,
    health: 80,
    maxHealth: 80,
    image: "https://images.unsplash.com/photo-1542623024-a797a755b8d0?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3"
  });
  
  const [clanCurrentHealth, setClanCurrentHealth] = useState(clan.health);
  const [battleEnded, setBattleEnded] = useState(false);
  const [roundCount, setRoundCount] = useState(0);
  const [isCapybaraRage, setIsCapybaraRage] = useState(false);
  
  const monsters = [
    {
      name: "–ì–æ–±–ª–∏–Ω-—Ä–∞–∑–≤–µ–¥—á–∏–∫",
      type: "–≥—É–º–∞–Ω–æ–∏–¥",
      strength: 40,
      defense: 20,
      health: 80,
      maxHealth: 80,
      image: "https://images.unsplash.com/photo-1542623024-a797a755b8d0?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3"
    },
    {
      name: "–ì–æ—Ä–Ω—ã–π —Ç—Ä–æ–ª–ª—å",
      type: "–≥–∏–≥–∞–Ω—Ç",
      strength: 70,
      defense: 40,
      health: 150,
      maxHealth: 150,
      image: "https://images.unsplash.com/photo-1535666669445-e8c15cd2e7a9?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3"
    },
    {
      name: "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω",
      type: "–¥—Ä–∞–∫–æ–Ω",
      strength: 100,
      defense: 80,
      health: 300,
      maxHealth: 300,
      image: "https://images.unsplash.com/photo-1577493340887-b7bfff550145?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3"
    }
  ];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏–¥–µ—Ä –∫–∞–ø–∏–±–∞—Ä–æ–π
  const isCapybara = clan.leaderRace.toLowerCase() === "–∫–∞–ø–∏–±–∞—Ä–∞";

  useEffect(() => {
    // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞ –º–µ–Ω—å—à–µ 30%, –∏ –ª–∏–¥–µ—Ä - –∫–∞–ø–∏–±–∞—Ä–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —è—Ä–æ—Å—Ç—å
    if (isCapybara && clanCurrentHealth < clan.health * 0.3 && !isCapybaraRage) {
      setIsCapybaraRage(true);
      setBattleLog(prev => [...prev, "üåä –ö–ê–ü–ò–ë–ê–†–°–ö–ê–Ø –Ø–†–û–°–¢–¨ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 20%, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 5 –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–π —Ö–æ–¥!"]);
    }
  }, [clanCurrentHealth, clan.health, isCapybara, isCapybaraRage]);

  const attack = () => {
    if (battleEnded) return;
    
    setRoundCount(roundCount + 1);
    const newLog = [...battleLog];
    
    // –†–∞—Å—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –∫–ª–∞–Ω–∞ –ø–æ –º–æ–Ω—Å—Ç—Ä—É
    let clanDamage = Math.max(5, clan.strength - currentMonster.defense / 2);
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    const abilityText = abilities.join(' ').toLowerCase();
    
    // –ö–∞–ø–∏–±–∞—Ä—Å–∫–∞—è —è—Ä–æ—Å—Ç—å
    if (isCapybara && isCapybaraRage) {
      clanDamage *= 1.2; // +20% –∫ —É—Ä–æ–Ω—É
      setClanCurrentHealth(prev => Math.min(clan.health, prev + 5)); // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 5 –∑–¥–æ—Ä–æ–≤—å—è
      newLog.push(`üåä –ö–∞–ø–∏–±–∞—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 5 –∑–¥–æ—Ä–æ–≤—å—è –±–ª–∞–≥–æ–¥–∞—Ä—è —è—Ä–æ—Å—Ç–∏!`);
    }
    
    // –í–æ–¥–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–∞–ø–∏–±–∞—Ä
    if (isCapybara && abilityText.includes("–≤–æ–¥–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è")) {
      clanDamage *= 1.1; // +10% –∫ —É—Ä–æ–Ω—É –±–ª–∞–≥–æ–¥–∞—Ä—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –∞—Ç–∞–∫–µ
    }
    
    if (abilityText.includes("–∫—Ä–∏—Ç–∏—á–µ—Å–∫") && Math.random() < 0.2) {
      clanDamage *= 2;
      newLog.push(`üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –ö–ª–∞–Ω ${clan.name} –Ω–∞–Ω–æ—Å–∏—Ç ${clanDamage.toFixed(0)} —É—Ä–æ–Ω–∞!`);
    } else {
      newLog.push(`–ö–ª–∞–Ω ${clan.name} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${clanDamage.toFixed(0)} —É—Ä–æ–Ω–∞.`);
    }
    
    // –°–Ω–∏–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–Ω—Å—Ç—Ä–∞
    const newMonsterHealth = Math.max(0, currentMonster.health - clanDamage);
    setCurrentMonster({...currentMonster, health: newMonsterHealth});
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º
    if (newMonsterHealth <= 0) {
      newLog.push(`üéâ –ú–æ–Ω—Å—Ç—Ä ${currentMonster.name} –ø–æ–±–µ–∂–¥–µ–Ω!`);
      
      // –í—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
      const nextMonsterIndex = monsters.findIndex(m => m.name === currentMonster.name) + 1;
      
      if (nextMonsterIndex < monsters.length) {
        const nextMonster = monsters[nextMonsterIndex];
        newLog.push(`üò± –ü–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: ${nextMonster.name}!`);
        setCurrentMonster(nextMonster);
      } else {
        newLog.push(`üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–ª–∞–Ω ${clan.name} –ø–æ–±–µ–¥–∏–ª –≤—Å–µ—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤!`);
        setBattleEnded(true);
      }
      
      setBattleLog(newLog);
      return;
    }
    
    // –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
    const monsterDamage = Math.max(5, currentMonster.strength - clan.defense / 2);
    
    // –ó–∞—â–∏—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    let actualDamage = monsterDamage;
    if (abilityText.includes("—Å–Ω–∏–∂–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —É—Ä–æ–Ω")) {
      actualDamage = monsterDamage * 0.8;
      newLog.push(`üõ°Ô∏è –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞" —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç –º–æ–Ω—Å—Ç—Ä–∞!`);
    }
    
    // –£–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞–ø–∏–±–∞—Ä
    if (isCapybara && abilityText.includes("–≤–æ–¥–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è") && Math.random() < 0.15) {
      actualDamage = 0;
      newLog.push(`üåä –ö–∞–ø–∏–±–∞—Ä–∞ —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏!`);
    }
    
    if (actualDamage > 0) {
      newLog.push(`${currentMonster.name} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${actualDamage.toFixed(0)} —É—Ä–æ–Ω–∞.`);
    }
    
    // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    if (abilityText.includes("–Ω–∞–Ω–æ—Å–∏—Ç") && abilityText.includes("–∞—Ç–∞–∫—É—é—â–∏–º")) {
      const counterDamage = 10;
      newLog.push(`‚ö° –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞! –ú–æ–Ω—Å—Ç—Ä –ø–æ–ª—É—á–∞–µ—Ç ${counterDamage} —É—Ä–æ–Ω–∞ –æ—Ç –∞—É—Ä—ã –∫–ª–∞–Ω–∞.`);
      setCurrentMonster({...currentMonster, health: Math.max(0, newMonsterHealth - counterDamage)});
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–ª–∞–Ω–∞
    const newClanHealth = Math.max(0, clanCurrentHealth - actualDamage);
    setClanCurrentHealth(newClanHealth);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–Ω–∞
    if (newClanHealth <= 0) {
      newLog.push(`üò¢ –ö–ª–∞–Ω ${clan.name} –ø–æ—Ç–µ—Ä–ø–µ–ª –ø–æ—Ä–∞–∂–µ–Ω–∏–µ!`);
      setBattleEnded(true);
    }
    
    setBattleLog(newLog);
  };
  
  const restartBattle = () => {
    setBattleLog([]);
    setCurrentMonster(monsters[0]);
    setClanCurrentHealth(clan.health);
    setBattleEnded(false);
    setRoundCount(0);
    setIsCapybaraRage(false);
  };

  return (
    <Card className="p-6 mb-6 bg-slate-50">
      <h2 className="text-xl font-semibold mb-4">–ê—Ä–µ–Ω–∞ —Å—Ä–∞–∂–µ–Ω–∏–π</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div className="text-center">
          <h3 className="font-bold mb-2">
            –ö–ª–∞–Ω: {clan.name}
            {isCapybaraRage && <span className="ml-2 text-amber-600">üåä –í –Ø–†–û–°–¢–ò!</span>}
          </h3>
          <Progress 
            value={(clanCurrentHealth / clan.health) * 100} 
            className={`h-2 mb-1 ${isCapybara ? 'bg-amber-100' : ''}`} 
            indicatorClassName={isCapybaraRage ? 'bg-amber-500' : ''}
          />
          <p className="text-sm mb-4">–ó–¥–æ—Ä–æ–≤—å–µ: {clanCurrentHealth}/{clan.health}</p>
          
          <div className={`p-3 rounded-md mb-2 ${isCapybara ? 'bg-amber-100' : 'bg-indigo-100'}`}>
            <p className="font-semibold">‚öîÔ∏è –°–∏–ª–∞ –∞—Ç–∞–∫–∏: {clan.strength}{isCapybaraRage ? ' (+20%)' : ''}</p>
            <p className="font-semibold">üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {clan.defense}</p>
            {isCapybara && <p className="font-semibold">üåä –†–∞—Å–∞ –ª–∏–¥–µ—Ä–∞: –ö–∞–ø–∏–±–∞—Ä–∞</p>}
          </div>
        </div>
        
        <div className="text-center">
          <h3 className="font-bold mb-2">–ú–æ–Ω—Å—Ç—Ä: {currentMonster.name}</h3>
          <Progress value={(currentMonster.health / currentMonster.maxHealth) * 100} className="h-2 mb-1" />
          <p className="text-sm mb-2">–ó–¥–æ—Ä–æ–≤—å–µ: {currentMonster.health}/{currentMonster.maxHealth}</p>
          
          <div className="p-3 bg-red-100 rounded-md mb-2">
            <p className="font-semibold">‚öîÔ∏è –°–∏–ª–∞ –∞—Ç–∞–∫–∏: {currentMonster.strength}</p>
            <p className="font-semibold">üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {currentMonster.defense}</p>
            <p className="font-semibold">üß© –¢–∏–ø: {currentMonster.type}</p>
          </div>
          
          <img 
            src={currentMonster.image} 
            alt={currentMonster.name} 
            className="w-full h-40 object-cover rounded-md"
          />
        </div>
      </div>
      
      <div className="flex gap-4 mb-6">
        <Button 
          onClick={attack} 
          disabled={battleEnded}
          className={`flex-1 ${isCapybara ? 'bg-amber-600 hover:bg-amber-700' : 'bg-red-600 hover:bg-red-700'}`}
        >
          <Icon name="Swords" className="mr-2" />
          –ê—Ç–∞–∫–æ–≤–∞—Ç—å
        </Button>
        
        <Button 
          onClick={restartBattle} 
          variant="outline"
          className="flex-1"
        >
          <Icon name="RefreshCw" className="mr-2" />
          –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        </Button>
      </div>
      
      <Separator className="my-4" />
      
      <div>
        <h3 className="font-semibold mb-2 flex items-center">
          <Icon name="ScrollText" className="mr-2" />
          –ñ—É—Ä–Ω–∞–ª —Å—Ä–∞–∂–µ–Ω–∏—è {roundCount > 0 ? `(–†–∞—É–Ω–¥ ${roundCount})` : ""}
        </h3>
        <div className="bg-slate-100 p-3 rounded-md h-40 overflow-y-auto">
          {battleLog.length === 0 ? (
            <p className="text-center text-gray-500 italic">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ</p>
          ) : (
            <ul className="space-y-1">
              {battleLog.map((log, index) => (
                <li key={index} className={`text-sm ${
                  log.includes("–ø–æ–±–µ–∂–¥–µ–Ω") || log.includes("–ø–æ–±–µ–¥–∏–ª") 
                    ? "font-bold text-green-600" 
                    : log.includes("–ø–æ—Ä–∞–∂–µ–Ω–∏–µ") 
                      ? "font-bold text-red-600" 
                      : log.includes("–ö–ê–ü–ò–ë–ê–†–°–ö–ê–Ø –Ø–†–û–°–¢–¨") || log.includes("–ö–∞–ø–∏–±–∞—Ä–∞")
                        ? "font-bold text-amber-600"
                        : ""
                }`}>
                  {log}
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </Card>
  );
};

export default MonsterBattle;
